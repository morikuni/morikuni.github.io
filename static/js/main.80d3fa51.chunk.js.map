{"version":3,"sources":["theme/Theme.ts","top/ArticleList.tsx","generated/graphql.tsx","top/TopScreen.tsx","article/Article.tsx","article/ArticleScreen.tsx","root/NotFoundScreen.tsx","component/Layout.tsx","root/Header.tsx","root/Blog.tsx","index.tsx","config/config.ts"],"names":["Theme","ContentType","TextType","List","styled","ul","H1","h1","ArticleList","props","articles","map","article","Li","li","Title","Link","a","ArticleLink","href","id","title","GetArticleDocument","gql","ListArticlesDocument","TopScreen","baseOptions","errorPolicy","Apollo","loading","error","data","networkError","message","graphQLErrors","i","key","PublishedDate","div","Article","Date","publishedAt","toLocaleDateString","convertContents","contents","result","Array","length","createElement","e","remain","push","Quote","blockquote","head","Error","type","Header","createHeader","slice","Paragraph","createText","texts","CodeBlock","language","showLineNumbers","customStyle","text","replace","createList","Code","code","Image","img","flatMap","txt","idx","Text","split","s","idx2","url","src","alt","h2","H2","h3","H3","h4","content","level","notListIdx","findIndex","c","items","createUL","item","ArticleScreen","variables","match","params","NotFoundScreen","Layout","Container","header","Blog","exact","path","component","apolloClient","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","client","document","getElementById"],"mappings":"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","file":"static/js/main.80d3fa51.chunk.js","sourcesContent":["export const Theme = {\n   TitleFontSize: \"1.6em\"\n};\n\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {Theme} from \"../theme/Theme\";\n\ninterface ArticleListProps {\n  articles: Article[]\n}\n\ninterface Article {\n  id: string,\n  title: string,\n  publishedAt: number,\n}\n\nconst List = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nconst H1 = styled.h1`\n  font-size: ${Theme.TitleFontSize};\n`;\n\nexport const ArticleList: React.FC<ArticleListProps> = props => {\n  return <div>\n    <H1>記事一覧</H1>\n    <List>\n      {props.articles.map(article =>\n        <ArticleLink article={article}/>\n      )}\n    </List>\n  </div>\n};\n\ninterface ArticleCardProps {\n  article: Article\n}\n\nconst Li = styled.li`\n  list-style: none;\n`\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  padding: 10px 10px;\n  border-left: 5px solid hsl(0, 0%, 20%);\n`;\n\nconst Link = styled.a`\n  text-decoration: none;\n  color: black;\n  &:visited {\n    color: black; \n  }\n  \n  &:hover {\n    color: rgb(250, 180, 180);\n    text-decoration: underline;\n  }\n`\n\nexport const ArticleLink: React.FC<ArticleCardProps> = props => {\n  return (\n    <Li>\n      <Link href={`/articles/${props.article.id}`}>\n          <Title>{props.article.title}</Title>\n      </Link>\n    </Li>\n  )\n};\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  article?: Maybe<Article>;\n  articles: Array<Article>;\n};\n\n\nexport type QueryArticleArgs = {\n  id: Scalars['String'];\n};\n\nexport type Article = {\n  __typename?: 'Article';\n  id: Scalars['String'];\n  title: Scalars['String'];\n  publishedAt: Scalars['Int'];\n  contents: Array<Content>;\n};\n\nexport enum ContentType {\n  Header = 'Header',\n  Paragraph = 'Paragraph',\n  CodeBlock = 'CodeBlock',\n  List = 'List',\n  Quote = 'Quote'\n}\n\nexport type Content = {\n  __typename?: 'Content';\n  type: ContentType;\n  texts: Array<Text>;\n  level?: Maybe<Scalars['Int']>;\n  language?: Maybe<Scalars['String']>;\n};\n\nexport enum TextType {\n  Text = 'Text',\n  Code = 'Code',\n  Link = 'Link',\n  Image = 'Image'\n}\n\nexport type Text = {\n  __typename?: 'Text';\n  type: TextType;\n  text: Scalars['String'];\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type GetArticleQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetArticleQuery = (\n  { __typename?: 'Query' }\n  & { article?: Maybe<(\n    { __typename?: 'Article' }\n    & Pick<Article, 'id' | 'title' | 'publishedAt'>\n    & { contents: Array<(\n      { __typename?: 'Content' }\n      & Pick<Content, 'type' | 'level' | 'language'>\n      & { texts: Array<(\n        { __typename?: 'Text' }\n        & Pick<Text, 'type' | 'text' | 'url'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type ListArticlesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ListArticlesQuery = (\n  { __typename?: 'Query' }\n  & { articles: Array<(\n    { __typename?: 'Article' }\n    & Pick<Article, 'id' | 'title' | 'publishedAt'>\n  )> }\n);\n\n\nexport const GetArticleDocument = gql`\n    query GetArticle($id: String!) {\n  article(id: $id) {\n    id\n    title\n    publishedAt\n    contents {\n      type\n      texts {\n        type\n        text\n        url\n      }\n      level\n      language\n    }\n  }\n}\n    `;\n\n/**\n * __useGetArticleQuery__\n *\n * To run a query within a React component, call `useGetArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetArticleQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetArticleQuery(baseOptions: Apollo.QueryHookOptions<GetArticleQuery, GetArticleQueryVariables>) {\n        return Apollo.useQuery<GetArticleQuery, GetArticleQueryVariables>(GetArticleDocument, baseOptions);\n      }\nexport function useGetArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetArticleQuery, GetArticleQueryVariables>) {\n          return Apollo.useLazyQuery<GetArticleQuery, GetArticleQueryVariables>(GetArticleDocument, baseOptions);\n        }\nexport type GetArticleQueryHookResult = ReturnType<typeof useGetArticleQuery>;\nexport type GetArticleLazyQueryHookResult = ReturnType<typeof useGetArticleLazyQuery>;\nexport type GetArticleQueryResult = Apollo.QueryResult<GetArticleQuery, GetArticleQueryVariables>;\nexport const ListArticlesDocument = gql`\n    query ListArticles {\n  articles {\n    id\n    title\n    publishedAt\n  }\n}\n    `;\n\n/**\n * __useListArticlesQuery__\n *\n * To run a query within a React component, call `useListArticlesQuery` and pass it any options that fit your needs.\n * When your component renders, `useListArticlesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useListArticlesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useListArticlesQuery(baseOptions?: Apollo.QueryHookOptions<ListArticlesQuery, ListArticlesQueryVariables>) {\n        return Apollo.useQuery<ListArticlesQuery, ListArticlesQueryVariables>(ListArticlesDocument, baseOptions);\n      }\nexport function useListArticlesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ListArticlesQuery, ListArticlesQueryVariables>) {\n          return Apollo.useLazyQuery<ListArticlesQuery, ListArticlesQueryVariables>(ListArticlesDocument, baseOptions);\n        }\nexport type ListArticlesQueryHookResult = ReturnType<typeof useListArticlesQuery>;\nexport type ListArticlesLazyQueryHookResult = ReturnType<typeof useListArticlesLazyQuery>;\nexport type ListArticlesQueryResult = Apollo.QueryResult<ListArticlesQuery, ListArticlesQueryVariables>;","import React from \"react\";\nimport {ArticleList} from \"./ArticleList\";\nimport {useListArticlesQuery} from \"../generated/graphql\";\n\ninterface TopProps {}\n\nexport const TopScreen: React.FC<TopProps> = props => {\n  const {loading, error, data} = useListArticlesQuery({\n    errorPolicy: 'all',\n  })\n\n  if (loading) {\n    return <span>Loading...</span>\n  }\n\n  if (error != null) {\n    return <div>Error:\n      {error.networkError?.message}\n      {error.graphQLErrors.map(({message}, i) =>\n        <span key={i}>{message}</span>\n      )}\n    </div>\n  }\n\n  if (data != null && data.articles ) {\n    return (\n      <div>\n        <ArticleList articles={data.articles}/>\n      </div>\n    )\n  }\n\n  return <div>something wrong</div>\n};\n\n\n","import React from \"react\";\nimport {Article as Data, Content, ContentType, Text, TextType} from \"../generated/graphql\";\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\nimport styled from \"styled-components\";\nimport {Theme} from \"../theme/Theme\";\n\ninterface ArticleProps {\n  data: Data\n}\n\nconst Title = styled.h1`\n  font-size: ${Theme.TitleFontSize};\n  padding: 10px 10px;\n  border-left: 5px solid hsl(0, 0%, 20%);\n`\n\nconst PublishedDate = styled.div`\n  text-align: right;\n  color: hsl(0, 0%, 60%);\n`\n\nexport const Article: React.FC<ArticleProps> = props => {\n  return <div>\n    <Title>{props.data.title}</Title>\n    <PublishedDate>{new Date(props.data.publishedAt * 1000).toLocaleDateString()}</PublishedDate>\n    {convertContents(props.data.contents)}\n  </div>\n};\n\nconst convertContents: (contents: Array<Content>) => JSX.Element = contents => {\n  const result = new Array<JSX.Element>()\n  while (contents.length > 0) {\n    const [e, remain] = createElement(contents)\n    result.push(<div key={result.length}>{e}</div>)\n    contents = remain\n  }\n  \n  return <div>\n    {result}\n  </div>\n}\n\nconst Quote = styled.blockquote`\n  background: hsl(0, 0%, 95%);\n  padding: 10px;\n  font-style: italic;\n  box-shadow: 1px 1px 5px hsla(0, 0%, 0%, 0.1);\n  border-left: 5px solid hsl(0, 0%, 60%);\n}\n`\n\nconst createElement: (contents: Content[]) => [JSX.Element, Content[]] = contents => {\n  const head = contents[0]\n  \n  if (head == null) {\n    throw new Error(\"head is empty\")\n  }\n  \n  switch (head.type) {\n    case ContentType.Header:\n      return [createHeader(head), contents.slice(1)]\n    case ContentType.Paragraph:\n      return [<p>{createText(head.texts)}</p>, contents.slice(1)]\n    case ContentType.CodeBlock:\n      return [\n        <SyntaxHighlighter language={head.language!} showLineNumbers={true} customStyle={{\"font-size\": \"0.8em\"}}>\n          {head.texts[0].text.replace(/\\n$/g, \"\")}\n        </SyntaxHighlighter>,\n        contents.slice(1),\n      ]\n    case ContentType.List:\n      return createList(contents)\n    case ContentType.Quote:\n      return [<Quote>{createText(head.texts)}</Quote>, contents.slice(1)]\n    default:\n      return [<div>{createText(head.texts)}</div>, contents.slice(1)]\n  }\n}\n\nconst Code = styled.code`\n  background: rgb(245, 242, 240);\n  margin: auto 3px; \n  padding: 2px 7px; \n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  font-size: 0.8em;\n  font-weight: bold;\n`\n\nconst Link = styled.a`\n  color: rgb(150, 150, 250);\n  text-decoration: none;\n  \n  &:visited {\n    color: rgb(150, 150, 250);\n  }\n  \n  &:hover {\n    color: rgb(250, 180, 180);\n    text-decoration: underline;\n  }\n`\n\nconst Image= styled.img`\n  max-width: 80%;\n  display: block;\n  margin: 0 auto;\n`\n\nconst createText: (texts: Text[]) => JSX.Element[] = texts => {\n  return texts.flatMap((txt, idx) => {\n    switch (txt.type) {\n      case TextType.Text:\n        const texts = txt.text.split(\"\\n\")\n        return texts.map((s, idx2) => {\n          if (idx2 === texts.length - 1) {\n            return <span key={idx+\"-\"+idx2}>{s}</span>\n          } else {\n            return <span key={idx+\"-\"+idx2}>{s}<br/></span>\n          }\n        })\n      case TextType.Code:\n        return <Code key={idx}>{txt.text}</Code>\n      case TextType.Link:\n        return <Link key={idx} href={txt.url!}>{txt.text}</Link>\n      case TextType.Image:\n        return <Image key={idx} src={txt.url!} alt={txt.text}/>\n      default:\n        throw new Error(`unknown text type: ${txt.type}`)\n    }\n  })\n}\n\nconst H1 = styled.h2`\n  border-left: 5px solid hsl(0, 0%, 40%);\n  padding: 3px 10px;\n  font-size: 1.4em;\n`;\n\nconst H2 = styled.h3`\n  border-left: 5px solid hsl(0, 0%, 60%);\n  padding: 3px 10px;\n  font-size: 1.3em;\n`;\n\nconst H3 = styled.h4`\n  border-left: 5px solid hsl(0, 0%, 80%);\n  padding: 3px 10px;\n  font-size: 1.2em;\n`;\n\nconst createHeader: (content: Content) => JSX.Element = content => {\n  if (content.level == null) {\n    throw new Error(\"empty header level\")\n  }\n\n  const text = createText(content.texts)\n  switch (content.level!) {\n    case 1:\n      return <H1>{text}</H1>\n    case 2:\n      return <H2>{text}</H2>\n    case 3:\n      return <H3>{text}</H3>\n    default:\n      throw new Error(`unsupported header level: ${content.level!}`)\n  }\n}\n\nconst createList: (contents: Content[]) => [JSX.Element, Content[]] = contents => {\n  const notListIdx = contents.findIndex(c => c.type !== ContentType.List)\n  const items = contents.slice(0, notListIdx)\n  \n  const [result] = createUL(1, items)\n  \n  return [result, contents.slice(notListIdx)]\n}\n\nconst createUL: (level: number, items: Content[]) => [JSX.Element, Content[]] = (level, items) => {\n  const result = new Array<JSX.Element>()\n  while (items.length > 0) {\n    const item = items[0]\n    if (item.level! === level) {\n      result.push(<li key={level+\"-\"+items.length}>{createText(item.texts)}</li>)\n      items = items.slice(1)\n    } else if (item.level! < level) {\n      break\n    } else {\n      const [ul, remain] = createUL(item.level!, items)\n      result.push(ul)\n      items = remain\n    }\n  }\n  return [<ul key={level}>{result}</ul>, items]\n}\n","import React from \"react\";\nimport {RouteComponentProps} from 'react-router-dom'\nimport {Article} from \"./Article\";\nimport {useGetArticleQuery} from \"../generated/graphql\";\n\ninterface ArticleScreenProps extends RouteComponentProps<{id: string}>{}\n\ninterface ArticleScreenState {\n  content: string | null\n}\n\nexport const ArticleScreen: React.FC<ArticleScreenProps> = props => {\n  const {loading, error, data} = useGetArticleQuery({\n    variables: {\n      id: props.match.params.id,\n    },\n    errorPolicy: 'all',\n  })\n\n  if (loading) {\n    return <span>Loading...</span>\n  }\n  \n  if (error != null) {\n    return <div>Error:\n      {error.networkError?.message}\n      {error.graphQLErrors.map(({message}, i) => \n        <span key={i}>{message}</span>\n      )}\n    </div>\n  }\n\n  if (data != null && data.article != null) {\n    return (\n      <div>\n        <Article data={data.article}/>\n      </div>\n    )\n  }\n  \n  return <div>記事が見つかりません。</div>\n};\n","import React from \"react\";\n\ninterface NotFoundScreenProps {}\n\nexport const NotFoundScreen: React.FC<NotFoundScreenProps> = props => {\n  return (\n    <div>\n      Not Found\n    </div>\n  )\n};\n","import styled from \"styled-components\";\n\nexport const Layout = styled.div`\n  padding: 10px min(200px, 7%);\n  max-width: 1000px;\n  margin: 0 auto;\n`\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {Layout} from \"../component/Layout\";\n\ninterface HeaderProps {}\n\nconst Container = styled.header`\n  background: hsla(0, 0%, 100%, 0.95);\n  box-shadow: 0px 2px 2px hsla(0, 0%, 0%, 0.1);\n  overflow: hidden;\n`;\n\nconst Link = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.8em;\n  display: inline;\n`;\n\nexport const Header: React.FC<HeaderProps> = props => {\n  return (\n    <Container>\n      <Layout>\n        <Link href=\"/\">\n          <Title>\n            morikuni.dev\n          </Title>\n        </Link>\n      </Layout>\n    </Container>\n  )\n};\n","import React from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {TopScreen} from \"../top/TopScreen\";\nimport {ArticleScreen} from \"../article/ArticleScreen\";\nimport {NotFoundScreen} from \"./NotFoundScreen\";\nimport {Header} from \"./Header\";\nimport {Layout} from \"../component/Layout\";\n\ninterface BlogProps {}\n\nexport const Blog: React.FC<BlogProps> = props => {\n  return (\n    <div>\n      <Header/>\n      <Layout>\n        <BrowserRouter>\n          <Switch>\n            <Route exact path='/' component={TopScreen}/>\n            <Route exact path='/articles/:id' component={ArticleScreen}/>\n            <Route component={NotFoundScreen}/>\n          </Switch>\n        </BrowserRouter>\n      </Layout>\n    </div>\n  )\n};\n","import './index.css';\nimport {Blog} from './root/Blog';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {graphqlServer} from \"./config/config\";\nimport {ApolloClient, ApolloProvider, InMemoryCache} from \"@apollo/client\";\n\nconst apolloClient = new ApolloClient({\n  uri: graphqlServer,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <Blog />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n","export const graphqlServer = process.env.REACT_APP_GRAPHQL_SERVER"],"sourceRoot":""}